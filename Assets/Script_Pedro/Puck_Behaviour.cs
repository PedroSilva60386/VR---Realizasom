using System;using OVR;using TMPro;using UnityEngine;using Random = UnityEngine.Random;public class Puck_Behaviour : MonoBehaviour{    //Table Walls    [SerializeField]    private Transform leftWall;    [SerializeField]    private Transform rightWall;    [SerializeField]    private Transform topWall;    [SerializeField]    private Transform bottomWall;        [SerializeField]    private float forceMultiplier = 5f;    [SerializeField]    private string inputAction = "Fire1"; // Change to the desired action    [SerializeField]    private GameObject paddle;    [SerializeField]    private  AudioClip[] soundClips;    public AudioSource bumbp;    public AudioSource wind;    //Puck's Rigid Body component    private Rigidbody _rb;    //Puck's Audio Source component    private AudioSource _audio;    //Help change the pitch of the puck    private float _pan;            //Player force applied to puck    private const float PlayerForce = 1.5f;        private void Start()    {        _rb = GetComponent<Rigidbody>();        _audio = GetComponent<AudioSource>();        _audio.clip = soundClips[1];        _audio.loop = true;        _audio.playOnAwake = true;        _audio.Play();    }        //Puck's first velocity value, and friction behaviour    private void FixedUpdate()    {                if (Input.GetButtonDown(inputAction))        {            var v = new Vector3(Random.value, 0, Random.value) * forceMultiplier;            _rb.AddForce(v);        }        var vv = _rb.velocity;        _rb.velocity = vv * 0.999f;        //ChangeStereoPan();    }    // ReSharper disable Unity.PerformanceAnalysis    private void ChangeStereoPan()    {            }    //Collision Detection    private void OnCollisionEnter(Collision collision)    {        _audio.clip = soundClips[0];        _audio.loop = false;        _audio.playOnAwake = false;        Debug.Log("Entered collision with " + collision.gameObject.name);        if (collision.gameObject.name == rightWall.gameObject.name)        {            var v = _rb.velocity;            _rb.velocity = new Vector3(-v.x, v.y, v.z);            _audio.Play();        }                if (collision.gameObject.name == leftWall.gameObject.name)        {            var v = _rb.velocity;            _rb.velocity = new Vector3(-v.x, v.y, v.z);            _audio.Play();        }                        if (collision.gameObject.name == bottomWall.gameObject.name)        {            //Audio Source da bottom Wall            var ba = bottomWall.gameObject.GetComponent<AudioSource>();            ba.Play();            ResetGame();        }                        if (collision.gameObject.name == topWall.gameObject.name)        {            var v = _rb.velocity;            _rb.velocity = new Vector3(v.x, v.y, -v.z);            _audio.Play();        }                // ReSharper disable once InvertIf        if (collision.gameObject.name == paddle.gameObject.name)        {             var v = _rb.velocity;             _rb.velocity = new Vector3(-v.x, v.y, -v.z) * PlayerForce;             _audio.Play();        }    }        //Used to reset the puck to it's initial state    private void ResetGame()    {        transform.position = new Vector3(0,(float)0.7998,0);        _rb.velocity = Vector3.zero;    }}